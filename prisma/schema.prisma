// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Authentication and Session
model User {
  id            String       @id @default(cuid())
  email         String       @unique
  emailVerified DateTime?
  password      String?
  name          String?
  image         String?
  restaurants   Restaurant[]
  sessions      Session[] // Changed the name from Session to sessions
  Account       Account[]
}

// Companies
model Company {
  id          String       @id @default(cuid())
  name        String
  email       String       @unique
  password    String
  restaurants Restaurant[]
}

// Restaurants
model Restaurant {
  id          String     @id @default(cuid())
  name        String
  description String?
  locations   Location[]
  offers      Offer[]
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id])
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?
}

// Locations
model Location {
  id           String     @id @default(cuid())
  name         String
  address      String
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  uniqueOffer  Boolean?   @default(false)
}

// Food Offers
model Offer {
  id                String     @id @default(cuid())
  title             String
  description       String?
  price             Float
  restaurantId      String
  restaurant        Restaurant @relation(fields: [restaurantId], references: [id])
  uniqueLocationIds Int[]
}

// Add VerificationToken model for email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Fix the expires field for Session model
model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime? // Make expires field optional
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Add Account model for third-party authentication
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
